name: Run tests
on:
  pull_request:
    types: [labeled]
  schedule:
  - cron:  '0 */6 * * *'
env:
  GO111MODULE: on

jobs:

  stub:
    name: Greeting
    runs-on: ubuntu-latest
    steps:

    - name: Greeting
      run: echo "This job is used to prevent the workflow to fail when all other jobs are skipped."

  unlabel:
    name: Unlabel
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1745044226 # execute tests label
    steps:

    - uses: actions/github-script@0.3.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.removeLabel({...context.issue, name: '${{github.event.label.name}}'})

  compile_test_binaries:
    name: Compile test binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'schedule' || (github.event_name == 'pull_request' && github.event.label.id == 1745044226) # execute tests label
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download go modules
      run: go mod download
      shell: bash

    - name: Compile test binaries
      run: |
        # unit test binaries
        ./scripts/tests/precompiled_test_binaries.sh ./cmd ./precompiled_test_binaries/unit
        ./scripts/tests/precompiled_test_binaries.sh ./pkg ./precompiled_test_binaries/unit

        # integration test binaries
        ./scripts/tests/precompiled_test_binaries.sh ./integration ./precompiled_test_binaries/integration --tags integration

        # integration_k8s test binaries
        ./scripts/tests/precompiled_test_binaries.sh ./integration ./precompiled_test_binaries/integration_k8s --tags integration_k8s

        # werf with coverage binary
        ./scripts/tests/werf_with_coverage.sh
      shell: bash

    - name: Upload unit test binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_unit_test_binaries"
        path: precompiled_test_binaries/unit

    - name: Upload integration test binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_test_binaries"
        path: precompiled_test_binaries/integration

    - name: Upload integration k8s test binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_k8s_test_binaries"
        path: precompiled_test_binaries/integration_k8s

    - name: Upload werf with coverage binary (ubuntu-latest, macOS-latest)
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: bin/tests/werf_with_coverage
      if: matrix.os != 'windows-latest'

    - name: Upload werf with coverage binary (windows-latest)
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: bin/tests/werf_with_coverage.exe
      if: matrix.os == 'windows-latest'

  unit_tests:
    name: Unit tests
    needs: compile_test_binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download unit binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_unit_test_binaries"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/unit_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        find . -type f -iname "*.test" -exec chmod +x {} \;
      shell: bash

    - name: Test
      run: ./scripts/ci/unit_test_runner.sh
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_tests:
    name: Integration tests
    needs: compile_test_binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download integration binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_test_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        ./scripts/ci/git.sh

        go build github.com/onsi/ginkgo/ginkgo

        chmod +x werf_with_coverage
        find integration -type f -iname "*.test" -exec chmod +x {} \;

        ls -la # TODO
      shell: bash

    - name: Test
      run: WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -timeout=24h0m0s -keepGoing integration/{.,**}/*.test
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_k8s_tests:
    name: Integration k8s tests
    needs: compile_test_binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        k8s_version: [1.11, 1.12, 1.13, 1.14, 1.15, 1.16]

    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download integration binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_test_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        ./scripts/ci/git.sh

        go build github.com/onsi/ginkgo/ginkgo

        chmod +x werf_with_coverage
        find integration -type f -iname "*.test" -exec chmod +x {} \;

        echo ::set-env name=WERF_TEST_K8S_BASE64_KUBECONFIG::$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _))
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_11: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_11 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_12: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_12 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_13: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_13 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_14: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_14 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_15: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_15 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_16: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_16 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -timeout=24h0m0s -keepGoing integration/{.,**}/*.test
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_tests_on_self_hosted_runners:
    name: Integration tests
    needs: compile_test_binaries
    strategy:
      fail-fast: false
      matrix:
#        os: [macOS, windows]
        os: [macOS]
    runs-on: [self-hosted, "${{ matrix.os }}"]
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download integration binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_integration_test_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        go build github.com/onsi/ginkgo/ginkgo

        chmod +x werf_with_coverage
        find integration -type f -iname "*.test" -exec chmod +x {} \;
      shell: bash

    - name: Test
      run: WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -timeout=24h0m0s -keepGoing integration/{.,**}/*.test
      shell: bash

  integration_k8s_tests_on_self_hosted_runners:
    name: Integration k8s tests
    needs: compile_test_binaries
    strategy:
      fail-fast: false
      matrix:
#        os: [macOS, windows]
        os: [macOS]
        k8s_version: [1.11, 1.12, 1.13, 1.14, 1.15, 1.16]
    runs-on: [self-hosted, "${{ matrix.os }}"]
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download integration binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_integration_test_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}-latest_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        go build github.com/onsi/ginkgo/ginkgo

        chmod +x werf_with_coverage
        find integration -type f -iname "*.test" -exec chmod +x {} \;

        echo ::set-env name=WERF_TEST_K8S_BASE64_KUBECONFIG::$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _))
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_11: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_11 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_12: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_12 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_13: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_13 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_14: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_14 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_15: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_15 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_16: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_16 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ./ginkgo -p -timeout=24h0m0s -keepGoing integration/{.,**}/*.test
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

  upload_coverage:
    name: Upload coverage
    needs:
    - unit_tests
    - integration_tests
    - integration_k8s_tests
    - integration_tests_on_self_hosted_runners
    - integration_k8s_tests_on_self_hosted_runners
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download coverage artifact
      uses: actions/download-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

    - name: Upload
      run: |
        export WERF_TEST_COVERAGE_DIR=tests_coverage
        export GIT_BRANCH=${GITHUB_REF:11}
        export GIT_COMMIT_SHA=$GITHUB_SHA
        ./scripts/ci/codeclimate.sh
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
