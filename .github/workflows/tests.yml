name: Run tests
on:
  pull_request:
    types: [labeled]
  schedule:
  - cron:  '0 */6 * * *'
env:
  GO111MODULE: on

jobs:

  stub:
    name: Greeting
    runs-on: ubuntu-latest
    steps:

    - name: Greeting
      run: echo "This job is used to prevent the workflow to fail when all other jobs are skipped."

  unlabel:
    name: Unlabel
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1745044226 # execute tests label
    steps:

    - uses: actions/github-script@0.3.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.removeLabel({...context.issue, name: '${{github.event.label.name}}'})

  download_go_modules:
    name: Download go modules
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'pull_request' && github.event.label.id == 1745044226) # execute tests label
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download modules
      run: go mod download
      shell: bash

    - name: integration test binaries
      run: ./scripts/tests/precompilied_test_binaries.sh ./integration ./precompiled_test_binaries/integration --tags integration
      shell: bash

    - name: integration_k8s test binaries
      run: ./scripts/tests/precompilied_test_binaries.sh ./integration ./precompiled_test_binaries/integration_k8s --tags integration_k8s
      shell: bash

    - name: unit test binaries
      run: |
        ./scripts/tests/precompilied_test_binaries.sh ./cmd ./precompiled_test_binaries/unit/cmd
        ./scripts/tests/precompilied_test_binaries.sh ./pkg ./precompiled_test_binaries/unit/pkg
      shell: bash

    - name: Upload unit binaries
      uses: actions/upload-artifact@master
      with:
        name: unit_binaries
        path: precompiled_test_binaries/unit

    - name: Upload integration binaries
      uses: actions/upload-artifact@master
      with:
        name: integration_binaries
        path: precompiled_test_binaries/integration

    - name: Upload integration k8s binaries
      uses: actions/upload-artifact@master
      with:
        name: integration_k8s_binaries
        path: precompiled_test_binaries/integration_k8s

  unit_tests:
    name: Unit tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Download unit binaries
      uses: actions/download-artifact@master
      with:
        name: unit_binaries
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/unit_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR
      shell: bash

    - name: Test
      run:
        for test_binary in $(find unit -type f -name '*.test' ); do
          filename=$(echo $test_binary | tr / _)_coverage.out;
          $test_binary -coverprofile=$WERF_TEST_COVERAGE_DIR/$filename \;
        done
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage
